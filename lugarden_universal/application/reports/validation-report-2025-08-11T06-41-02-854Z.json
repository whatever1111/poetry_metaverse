{
  "timestamp": "2025-08-11T06:41:02.744Z",
  "summary": {
    "totalChecks": 13,
    "passedChecks": 11,
    "failedChecks": 2,
    "totalIssues": 15
  },
  "sections": {
    "integrity": {
      "tableCounts": {
        "Universe": 2,
        "Theme": 6,
        "Emotion": 3,
        "UniverseTheme": 10,
        "UniverseEmotion": 6,
        "CrossUniverseContentLink": 41,
        "ZhouProject": 1,
        "ZhouSubProject": 3,
        "ZhouPoem": 48,
        "ZhouQA": 12,
        "ZhouMapping": 48,
        "MaoxiaodouPoem": 14,
        "MaoxiaodouCharacter": 30,
        "MaoxiaodouCharacterRelation": 38,
        "MaoxiaodouScene": 29,
        "MaoxiaodouTerminology": 125,
        "MaoxiaodouTheme": 6,
        "MaoxiaodouTimeline": 3,
        "MaoxiaodouTheory": 4,
        "MaoxiaodouReadingLayer": 3,
        "MaoxiaodouMapping": 49,
        "MaoxiaodouMetadata": 1
      },
      "foreignKeyChecks": {},
      "uniqueConstraintChecks": {
        "Theme.name": 0,
        "Emotion.name": 0,
        "Universe.code": 0
      },
      "dataQualityIssues": [
        {
          "type": "ERROR",
          "table": "UniverseTheme -> Universe",
          "field": "FOREIGN_KEY_CHECK",
          "issue": "\nInvalid `prisma.universeTheme.findMany()` invocation in\nC:\\Users\\C2\\Desktop\\三号线诗聚\\lu_garden_lab\\lugarden_universal\\application\\scripts\\validation\\check-integrity.cjs:119:53\n\n  116 {\n  117   name: 'UniverseTheme -> Universe',\n  118   check: async () => {\n→ 119     const orphaned = await prisma.universeTheme.findMany({\n            where: {\n          +   universe: {\n          +     is: UniverseWhereInput,\n          +     isNot: UniverseWhereInput\n          +   }\n            }\n          })\n\nArgument `universe` must not be null."
        },
        {
          "type": "ERROR",
          "table": "UniverseTheme -> Theme",
          "field": "FOREIGN_KEY_CHECK",
          "issue": "\nInvalid `prisma.universeTheme.findMany()` invocation in\nC:\\Users\\C2\\Desktop\\三号线诗聚\\lu_garden_lab\\lugarden_universal\\application\\scripts\\validation\\check-integrity.cjs:130:53\n\n  127 {\n  128   name: 'UniverseTheme -> Theme',\n  129   check: async () => {\n→ 130     const orphaned = await prisma.universeTheme.findMany({\n            where: {\n          +   theme: {\n          +     is: ThemeWhereInput,\n          +     isNot: ThemeWhereInput\n          +   }\n            }\n          })\n\nArgument `theme` must not be null."
        },
        {
          "type": "ERROR",
          "table": "UniverseEmotion -> Universe",
          "field": "FOREIGN_KEY_CHECK",
          "issue": "\nInvalid `prisma.universeEmotion.findMany()` invocation in\nC:\\Users\\C2\\Desktop\\三号线诗聚\\lu_garden_lab\\lugarden_universal\\application\\scripts\\validation\\check-integrity.cjs:141:55\n\n  138 {\n  139   name: 'UniverseEmotion -> Universe',\n  140   check: async () => {\n→ 141     const orphaned = await prisma.universeEmotion.findMany({\n            where: {\n          +   universe: {\n          +     is: UniverseWhereInput,\n          +     isNot: UniverseWhereInput\n          +   }\n            }\n          })\n\nArgument `universe` must not be null."
        },
        {
          "type": "ERROR",
          "table": "UniverseEmotion -> Emotion",
          "field": "FOREIGN_KEY_CHECK",
          "issue": "\nInvalid `prisma.universeEmotion.findMany()` invocation in\nC:\\Users\\C2\\Desktop\\三号线诗聚\\lu_garden_lab\\lugarden_universal\\application\\scripts\\validation\\check-integrity.cjs:152:55\n\n  149 {\n  150   name: 'UniverseEmotion -> Emotion',\n  151   check: async () => {\n→ 152     const orphaned = await prisma.universeEmotion.findMany({\n            where: {\n          +   emotion: {\n          +     is: EmotionWhereInput,\n          +     isNot: EmotionWhereInput\n          +   }\n            }\n          })\n\nArgument `emotion` must not be null."
        },
        {
          "type": "ERROR",
          "table": "ZhouPoem -> Universe",
          "field": "FOREIGN_KEY_CHECK",
          "issue": "\nInvalid `prisma.zhouPoem.findMany()` invocation in\nC:\\Users\\C2\\Desktop\\三号线诗聚\\lu_garden_lab\\lugarden_universal\\application\\scripts\\validation\\check-integrity.cjs:163:48\n\n  160 {\n  161   name: 'ZhouPoem -> Universe',\n  162   check: async () => {\n→ 163     const orphaned = await prisma.zhouPoem.findMany({\n            where: {\n          +   universe: {\n          +     is: UniverseWhereInput,\n          +     isNot: UniverseWhereInput\n          +   }\n            }\n          })\n\nArgument `universe` must not be null."
        },
        {
          "type": "ERROR",
          "table": "MaoxiaodouPoem -> Universe",
          "field": "FOREIGN_KEY_CHECK",
          "issue": "\nInvalid `prisma.maoxiaodouPoem.findMany()` invocation in\nC:\\Users\\C2\\Desktop\\三号线诗聚\\lu_garden_lab\\lugarden_universal\\application\\scripts\\validation\\check-integrity.cjs:174:54\n\n  171 {\n  172   name: 'MaoxiaodouPoem -> Universe',\n  173   check: async () => {\n→ 174     const orphaned = await prisma.maoxiaodouPoem.findMany({\n            where: {\n          +   universe: {\n          +     is: UniverseWhereInput,\n          +     isNot: UniverseWhereInput\n          +   }\n            }\n          })\n\nArgument `universe` must not be null."
        },
        {
          "type": "NULL_VALUE",
          "table": "MaoxiaodouPoem.body",
          "field": "NULL_CHECK",
          "issue": "2 条空值记录"
        }
      ],
      "summary": {
        "totalTables": 22,
        "totalRecords": 482,
        "issuesFound": 7
      }
    },
    "relationships": {
      "bridgeRelationships": {
        "UniverseTheme 桥表关联": {
          "count": 10,
          "issues": []
        },
        "UniverseEmotion 桥表关联": {
          "count": 6,
          "issues": []
        }
      },
      "crossUniverseRelationships": {
        "CrossUniverseContentLink 跨宇宙关联": {
          "count": 41,
          "issues": []
        }
      },
      "internalRelationships": {
        "周春秋宇宙内部关联": {
          "count": 63,
          "issues": []
        },
        "毛小豆宇宙内部关联": {
          "count": 67,
          "issues": []
        }
      },
      "issues": [],
      "summary": {
        "totalChecks": 5,
        "passedChecks": 5,
        "failedChecks": 0
      }
    },
    "consistency": {
      "dataTypeChecks": {
        "Universe ID 格式一致性": {
          "count": 2,
          "issues": [
            "Universe Code 格式错误: maoxiaodou 应该以 'universe_' 开头",
            "Universe Code 格式错误: zhou_spring_autumn 应该以 'universe_' 开头"
          ]
        },
        "Theme ID 格式一致性": {
          "count": 6,
          "issues": [
            "Theme ID 格式错误: male_community 应该以 'theme_' 开头",
            "Theme ID 格式错误: identity_anxiety 应该以 'theme_' 开头",
            "Theme ID 格式错误: microphysics_of_power 应该以 'theme_' 开头",
            "Theme ID 格式错误: ugly_feelings 应该以 'theme_' 开头",
            "Theme ID 格式错误: consumerism 应该以 'theme_' 开头",
            "Theme ID 格式错误: time_and_stagnation 应该以 'theme_' 开头"
          ]
        },
        "Emotion ID 格式一致性": {
          "count": 3,
          "issues": []
        }
      },
      "formatChecks": {
        "诗歌标题格式一致性": {
          "count": 62,
          "issues": []
        },
        "JSON 字段格式一致性": {
          "count": 30,
          "issues": []
        }
      },
      "crossUniverseConsistency": {
        "主题名称跨宇宙一致性": {
          "count": 6,
          "issues": []
        },
        "桥表数据一致性": {
          "count": 16,
          "issues": []
        },
        "跨宇宙关联一致性": {
          "count": 41,
          "issues": []
        }
      },
      "issues": [
        {
          "type": "DATA_TYPE",
          "category": "Universe ID 格式一致性",
          "issue": "Universe Code 格式错误: maoxiaodou 应该以 'universe_' 开头"
        },
        {
          "type": "DATA_TYPE",
          "category": "Universe ID 格式一致性",
          "issue": "Universe Code 格式错误: zhou_spring_autumn 应该以 'universe_' 开头"
        },
        {
          "type": "DATA_TYPE",
          "category": "Theme ID 格式一致性",
          "issue": "Theme ID 格式错误: male_community 应该以 'theme_' 开头"
        },
        {
          "type": "DATA_TYPE",
          "category": "Theme ID 格式一致性",
          "issue": "Theme ID 格式错误: identity_anxiety 应该以 'theme_' 开头"
        },
        {
          "type": "DATA_TYPE",
          "category": "Theme ID 格式一致性",
          "issue": "Theme ID 格式错误: microphysics_of_power 应该以 'theme_' 开头"
        },
        {
          "type": "DATA_TYPE",
          "category": "Theme ID 格式一致性",
          "issue": "Theme ID 格式错误: ugly_feelings 应该以 'theme_' 开头"
        },
        {
          "type": "DATA_TYPE",
          "category": "Theme ID 格式一致性",
          "issue": "Theme ID 格式错误: consumerism 应该以 'theme_' 开头"
        },
        {
          "type": "DATA_TYPE",
          "category": "Theme ID 格式一致性",
          "issue": "Theme ID 格式错误: time_and_stagnation 应该以 'theme_' 开头"
        }
      ],
      "summary": {
        "totalChecks": 8,
        "passedChecks": 6,
        "failedChecks": 2
      }
    }
  },
  "recommendations": [
    "数据完整性存在问题，建议检查外键关联和唯一性约束",
    "数据一致性存在问题，建议检查数据格式和类型",
    "发现较多问题，建议系统性地修复数据质量问题"
  ]
}